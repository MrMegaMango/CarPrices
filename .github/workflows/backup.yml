name: Database Backup

on:
  schedule:
    # Run backup daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Install PostgreSQL 17 client
        run: |
          # Add PostgreSQL official APT repository
          curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          
      - name: Verify PostgreSQL version
        run: pg_dump --version
          
      - name: Install Go dependencies
        working-directory: ./scripts
        run: go mod download
        
      - name: Configure AWS CLI (if using AWS)
        if: env.CLOUD_PROVIDER == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Google Cloud CLI (if using GCP)
        if: env.CLOUD_PROVIDER == 'gcp'
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Setup Azure CLI (if using Azure)
        if: env.CLOUD_PROVIDER == 'azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Create comprehensive backup
        working-directory: ./scripts
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CLOUD_PROVIDER: ${{ secrets.CLOUD_PROVIDER }}
          BACKUP_BUCKET: ${{ secrets.BACKUP_BUCKET }}
          CLOUD_REGION: ${{ secrets.CLOUD_REGION }}
        run: go run backup.go
        
      - name: Upload to GitHub artifacts (short-term)
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backups/
          retention-days: 90
          
      - name: Notify backup completion
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ 30-year backup completed successfully"
            echo "üìä Stored in cloud storage for long-term retention"
          else
            echo "‚ùå Backup failed"
          fi
